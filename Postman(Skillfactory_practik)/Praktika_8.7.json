{
	"info": {
		"_postman_id": "71f6e9e3-07cb-4326-adc2-e65b7fd0a065",
		"name": "Практика 8.7",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21603943"
	},
	"item": [
		{
			"name": "Запрос 1: Получение ключа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Key in responseBody\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(jsonData).to.have.all.keys('key');\r",
							"    pm.collectionVariables.set(\"auth_key\", jsonData.key);// Запись ключа в переменную\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "email",
						"value": "{{email}}",
						"type": "text"
					},
					{
						"key": "password",
						"value": "{{pass}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/api/key",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос 2: Добавление питомца",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create new pet and check name\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    pm.collectionVariables.set(\"petid\", jsonData.id);// Запись id  в переменную\r",
							"    pm.collectionVariables.set(\"name\", jsonData.name); \r",
							"    /*Добавил перезапись переменной, потому что это требуется в задании. Цитирую:\"запись name питомца из ответа в переменную name коллекции Postman\"\r",
							"    Хотя эту переменную можно брать напрямую из БД. \r",
							"    Как я понял, если попытаться сразу вызвать collectionVariables.get то значение будет пустым, т.к. метод collectionVariables и ему подобные(для глобал или локал переменных) не подтягивают значения из БД \r",
							"    (они работают или с заранее заданными скриптом переменными, или заданными напрямую в коллекции/глобальные в постмене) */\r",
							"    pm.expect(data.name).to.eql(jsonData.name);// Если проводить тест, то такой: проверка совпадения отправленного имени и полученного в ответе(Не записалось ли то, что мы не отправляли).\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "animal_type",
							"value": "{{type}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/api/create_pet_simple",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"create_pet_simple"
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос 3: Изменение имени питомца",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Change name\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(pm.collectionVariables.get(\"name\")).to.not.eql(jsonData.name);//Проверка на не совпадение нового имени старому\r",
							"    pm.collectionVariables.set(\"name\", jsonData.name);// Перезаписываем переменную name\r",
							"    pm.expect(data.new_name).to.eql(jsonData.name);// Допом можно проверить совпадение нового имени которое было отправленно с тем что получили в ответе(Не записалось ли то, что мы не отправляли). \r",
							"});\r",
							"\r",
							"   "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{new_name}}",
							"type": "text"
						},
						{
							"key": "animal_type",
							"value": "{{type}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "pet_photo",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/api/pets/:pet_id",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"pets",
						":pet_id"
					],
					"variable": [
						{
							"key": "pet_id",
							"value": "{{petid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос 4: Получение списка своих питомцев(проверка на изменение имени)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Name change check\", function () {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(pm.collectionVariables.get(\"name\")).to.eql(jsonData.pets[0].name);\r",
							"}); \r",
							"//Т.к. этот сценарий предполагает использование БД для обозначения тестовых данных, то что бы не засорять профиль добавлю запрос на удаление ране добавленного питомца"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/pets?filter=my_pets",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"pets"
					],
					"query": [
						{
							"key": "filter",
							"value": "my_pets"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос 5(не по заданию): Удаление созданного питомца",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Т.к. этот сценарий предполагает использование БД для обозначения тестовых данных, то что бы не засорять профиль добавил запрос на удаление ране добавленного питомца"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/api/pets/{{petid}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"pets",
						"{{petid}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{auth_key}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "auth_key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "auth_key",
			"value": "",
			"type": "string"
		},
		{
			"key": "url",
			"value": "https://petfriends.skillfactory.ru/",
			"type": "string"
		},
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "new_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "age",
			"value": "",
			"type": "string"
		},
		{
			"key": "type",
			"value": "",
			"type": "string"
		},
		{
			"key": "petid",
			"value": "",
			"type": "string"
		},
		{
			"key": "email",
			"value": "u.golovin@yandex.ru",
			"type": "string"
		},
		{
			"key": "pass",
			"value": "3245",
			"type": "string"
		}
	]
}